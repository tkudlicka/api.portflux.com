definitions:
  models.BrokerResp:
    properties:
      brokerid:
        type: string
      created_at:
        type: string
      description:
        type: string
      extid:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateBrokerReq:
    properties:
      description:
        type: string
      extid:
        type: string
      name:
        type: string
    type: object
  models.CreateUserReq:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    type: object
  models.CreationResp:
    properties:
      inserted_id:
        type: string
    type: object
  models.LoginUserReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginUserResp:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResp'
    type: object
  models.MultiCreationResp:
    properties:
      inserted_ids:
        items:
          type: string
        type: array
    type: object
  models.UpdateBrokerReq:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  models.UpdateUserReq:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.UserResp:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      updated_at:
        type: string
      userid:
        type: string
    type: object
info:
  contact: {}
  description: Powered by scv-go-tools - https://github.com/sergicanet9/scv-go-tools
  title: Go Hexagonal API
paths:
  /health:
    get:
      description: Runs a Health Check
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: object
        "503":
          description: Service Unavailable
          schema:
            type: object
      summary: Health Check
      tags:
      - Health
  /v1/brokers:
    get:
      description: Gets all the brokers
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BrokerResp'
            type: array
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get all brokers
      tags:
      - Brokers
    post:
      description: Creates a new broker
      parameters:
      - description: New broker to be created
        in: body
        name: broker
        required: true
        schema:
          $ref: '#/definitions/models.CreateBrokerReq'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.CreationResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create broker
      tags:
      - Brokers
  /v1/brokers/{id}:
    delete:
      description: Delete a broker
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Delete broker
      tags:
      - Brokers
    get:
      description: Gets a broker by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BrokerResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get broker by ID
      tags:
      - Brokers
    patch:
      description: Updates a broker
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Broker
        in: body
        name: Broker
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBrokerReq'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Update broker
      tags:
      - Brokers
  /v1/brokers/many:
    post:
      description: Creates many brokers atomically
      parameters:
      - description: New brokers to be created
        in: body
        name: brokers
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateBrokerReq'
          type: array
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiCreationResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create many brokers
      tags:
      - Brokers
  /v1/brokers/slug/{slug}:
    get:
      description: Gets a broker by slug
      parameters:
      - description: Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BrokerResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get broker by slug
      tags:
      - Brokers
  /v1/user:
    get:
      description: Gets all the users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResp'
            type: array
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Creates a new user
      parameters:
      - description: New user to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReq'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.CreationResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create user
      tags:
      - Users
  /v1/user/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Gets a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      description: Updates a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserReq'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /v1/user/email/{email}:
    get:
      description: Gets a user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Get user by email
      tags:
      - Users
  /v1/user/login:
    post:
      description: Logs in an user
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginUserResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Login user
      tags:
      - Users
  /v1/user/many:
    post:
      description: Creates many users atomically
      parameters:
      - description: New users to be created
        in: body
        name: users
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateUserReq'
          type: array
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiCreationResp'
        "400":
          description: Bad Request
          schema:
            type: object
        "408":
          description: Request Timeout
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create many users
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
