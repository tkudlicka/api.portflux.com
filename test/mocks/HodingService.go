// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tkudlicka/portflux-api/core/models"
)

// HodingService is an autogenerated mock type for the HodingService type
type HodingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *HodingService) Create(ctx context.Context, user models.CreateUserReq) (models.CreationResp, error) {
	ret := _m.Called(ctx, user)

	var r0 models.CreationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserReq) (models.CreationResp, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserReq) models.CreationResp); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.CreationResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateUserReq) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: ctx, users
func (_m *HodingService) CreateMany(ctx context.Context, users []models.CreateUserReq) (models.MultiCreationResp, error) {
	ret := _m.Called(ctx, users)

	var r0 models.MultiCreationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateUserReq) (models.MultiCreationResp, error)); ok {
		return rf(ctx, users)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateUserReq) models.MultiCreationResp); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Get(0).(models.MultiCreationResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.CreateUserReq) error); ok {
		r1 = rf(ctx, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *HodingService) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *HodingService) GetAll(ctx context.Context) ([]models.UserResp, error) {
	ret := _m.Called(ctx)

	var r0 []models.UserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.UserResp, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.UserResp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *HodingService) GetByID(ctx context.Context, ID string) (models.UserResp, error) {
	ret := _m.Called(ctx, ID)

	var r0 models.UserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.UserResp, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.UserResp); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(models.UserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, user
func (_m *HodingService) Update(ctx context.Context, ID string, user models.UpdateUserReq) error {
	ret := _m.Called(ctx, ID, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UpdateUserReq) error); ok {
		r0 = rf(ctx, ID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHodingService creates a new instance of HodingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHodingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HodingService {
	mock := &HodingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
